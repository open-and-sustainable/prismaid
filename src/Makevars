# Compiler Flags
CFLAGS += -O2
PKG_CFLAGS += -O2
PKG_CFLAGS += -I../inst/include

# Platform Identification
UNAME := $(shell uname)

# Default target to avoid missing separator errors
all: platform-specific-libs


# Compile R_wrapper.c to R_wrapper.o
R_wrapper.o: R_wrapper.c
    $(CC) $(CFLAGS) -c R_wrapper.c -o R_wrapper.o

# Platform-Specific Configuration for Library Linking
platform-specific-libs:
ifeq ($(UNAME), Linux)
	@echo "Detected Linux: Keeping only Linux library"
    PKG_LIBS += R_wrapper.o -L../inst/libs/linux -lprismaid_linux_amd64 -Wl,-rpath,'$$ORIGIN/../libs/linux' -Wl,-v
endif
ifeq ($(UNAME), Darwin)
    @echo "Detected macOS: Keeping only macOS library"
    PKG_LIBS += R_wrapper.o -L../inst/libs/macos -lprismaid_darwin_amd64 -Wl,-rpath,'@loader_path/../libs/macos'
endif
ifeq ($(UNAME), Windows_NT)
    @echo "Detected Windows: Keeping only Windows library"
    PKG_LIBS +=  R_wrapper.o -L../inst/libs/windows -lprismaid_windows_amd64 -Wl,--output-def,libprismaid_windows_amd64.def
    # Ensure the Go shared library is linked
    PKG_LIBS += libprismaid_windows_amd64.dll
endif

# Add target to perform library cleanup
.PHONY: clean

clean:
	@echo "Running clean task for platform $(UNAME)..."
ifeq ($(UNAME), Linux)
	rm -f ../inst/libs/macos/*.dylib
#rm -f ../inst/libs/windows/*.dll
endif
ifeq ($(UNAME), Darwin)
	rm -f ../inst/libs/linux/*.so
	rm -f ../inst/libs/windows/*.dll
endif
ifeq ($(UNAME), Windows)
	rm -f ../inst/libs/linux/*.so
	rm -f ../inst/libs/macos/*.dylib
endif
