name: Build and Deploy Shared Libraries

on:
    push:
        branches: [main]

permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    update-version-for-r:
        runs-on: ubuntu-latest
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Git
              run: sudo apt-get install git jq

            - name: Determine Version
              id: versioning
              run: |
                  if [[ $GITHUB_REF =~ refs/tags/v* ]]; then
                    # If build is triggered by a tag
                    VERSION=${GITHUB_REF#refs/tags/v}
                  else
                    # If build is triggered by a branch push without a tag, use the latest tag from main
                    VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
                    VERSION=${VERSION#v}  # Strip 'v' prefix if present in tags
                  fi
                  echo "VERSION=${VERSION}" >> $GITHUB_ENV
                  echo "Version determined: ${VERSION}"

            - name: Update DESCRIPTION File
              run: |
                  sed -i "s/^Version:.*/Version: ${{ env.VERSION }}/" r-package/DESCRIPTION

            - name: Install GitHub CLI
              run: sudo apt-get install gh -y

            - name: Commit and push changes
              run: |
                  # Get latest main branch
                  git fetch origin main
                  original_main_sha=$(git rev-parse origin/main)

                  # Create a new branch from the latest main
                  branch_name="update-version-${GITHUB_RUN_ID}"
                  git checkout -b $branch_name origin/main

                  # Configure git
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

                  # Check for changes in the DESCRIPTION file
                  if [[ -n "$(git status --porcelain r-package/DESCRIPTION)" ]]; then
                      echo "Changes detected in DESCRIPTION file."

                      # Stage and commit changes
                      git add r-package/DESCRIPTION
                      git commit -m "Update version to ${{ env.VERSION }}"

                      # Check if main branch has changed while we were working
                      git fetch origin main
                      current_main_sha=$(git rev-parse origin/main)

                      if [[ "$original_main_sha" != "$current_main_sha" ]]; then
                          echo "Main branch has been updated. Rebasing changes..."
                          git rebase origin/main

                          # Check if there are still changes after rebasing
                          if [[ -n "$(git diff --name-only HEAD~ HEAD 2>/dev/null)" ]]; then
                              echo "Changes still exist after rebasing. Continuing with PR creation."
                          else
                              echo "No changes remain after rebasing. Skipping PR creation."
                              exit 0
                          fi
                      fi

                      # Push the branch (with force in case we rebased)
                      git push -f origin $branch_name

                      # Create Pull Request and capture PR number
                      pr_url=$(gh pr create --title "Update R Package Version" --body "Auto-update version to ${{ env.VERSION }} by CI/CD." --base main --head $branch_name)

                      # Wait briefly to avoid race conditions
                      sleep 5

                      # Get the PR node ID (required for GraphQL)
                      pr_node_id=$(gh pr view "$pr_url" --json id -q .id)

                      # Enable auto-merge via GitHub GraphQL API
                      curl -X POST -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
                           -H "Content-Type: application/json" \
                           -d '{"query":"mutation { enablePullRequestAutoMerge(input: { pullRequestId: \"'"$pr_node_id"'\" mergeMethod: SQUASH }) { pullRequest { number autoMergeRequest { enabledAt } } } }"}' \
                           https://api.github.com/graphql

                      # Automatically merge the PR
                      gh pr merge --auto --squash --delete-branch
                  else
                      echo "No changes detected in DESCRIPTION file. Skipping PR creation."
                  fi

    build-linux-amd64:
        needs: update-version-for-r
        name: Build Linux Shared Library
        runs-on: ubuntu-latest
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.21"

            - name: Build shared library for Linux
              working-directory: sharedlib
              run: |
                  go build -buildmode=c-shared -o libprismaid_linux_amd64.so export.go

            - name: Upload Linux shared library artifact
              uses: actions/upload-artifact@v4
              with:
                  name: linux-amd64-shared-library
                  path: sharedlib/libprismaid_linux_amd64.so

            - name: Install GitHub CLI
              run: sudo apt-get install gh -y

            - name: Commit and push changes
              run: |
                  # Get latest main branch
                  git fetch origin main
                  original_main_sha=$(git rev-parse origin/main)

                  # Create a new branch from the latest main
                  branch_name="update-linux-lib-${GITHUB_RUN_ID}"
                  git checkout -b $branch_name origin/main

                  # Copy the libraries to their destinations
                  cp sharedlib/libprismaid_linux_amd64.so r-package/inst/libs/linux/libprismaid_linux_amd64.so
                  cp sharedlib/libprismaid_linux_amd64.so julia/PrismAId/deps/linux-x86_64/libprismaid_linux_amd64.so

                  # Check if there are any actual changes
                  if [[ -n "$(git status --porcelain r-package/inst/libs/linux/libprismaid_linux_amd64.so julia/PrismAId/deps/linux-x86_64/libprismaid_linux_amd64.so)" ]]; then
                      echo "Changes detected in library files."

                      # Configure git
                      git config --local user.email "action@github.com"
                      git config --local user.name "GitHub Action"

                      # Stage and commit changes
                      git add r-package/inst/libs/linux/libprismaid_linux_amd64.so julia/PrismAId/deps/linux-x86_64/libprismaid_linux_amd64.so
                      git commit -m "Update Linux lib."

                      # Check if main branch has changed while we were working
                      git fetch origin main
                      current_main_sha=$(git rev-parse origin/main)

                      if [[ "$original_main_sha" != "$current_main_sha" ]]; then
                          echo "Main branch has been updated. Rebasing changes..."
                          git rebase origin/main

                          # Check if there are still changes after rebasing
                          if [[ -n "$(git diff --name-only HEAD~ HEAD 2>/dev/null)" ]]; then
                              echo "Changes still exist after rebasing. Continuing with PR creation."
                          else
                              echo "No changes remain after rebasing. Skipping PR creation."
                              exit 0
                          fi
                      fi

                      # Push the branch (with force in case we rebased)
                      git push -f origin $branch_name

                      # Create Pull Request
                      gh pr create --title "Update Linux Library" --body "Auto-update by CI/CD." --base main --head $branch_name

                      # Automatically approve and merge the PR
                      gh pr merge --auto --squash --delete-branch
                  else
                      echo "No changes detected in library files. Skipping PR creation."
                  fi

    build-windows-amd64:
        needs: build-linux-amd64
        name: Build Windows Shared Library
        runs-on: windows-latest
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.21"

            - name: Build shared library for Windows
              working-directory: sharedlib
              shell: pwsh
              run: |
                  go build -buildmode=c-shared -o libprismaid_windows_amd64.dll .\export.go

            - name: Upload Windows shared library artifact
              uses: actions/upload-artifact@v4
              with:
                  name: windows-amd64-shared-library
                  path: sharedlib/libprismaid_windows_amd64.dll

            - name: Install GitHub CLI on Windows
              run: |
                  choco install gh -y

            - name: Commit and push changes for Windows
              shell: bash
              run: |
                  # Get latest main branch
                  git fetch origin main
                  original_main_sha=$(git rev-parse origin/main)

                  # Create a new branch from the latest main
                  branch_name="update-windows-lib-${GITHUB_RUN_ID}"
                  git checkout -b $branch_name origin/main

                  # Copy the Windows libraries to their destinations
                  cp sharedlib/libprismaid_windows_amd64.dll r-package/inst/libs/windows/libprismaid_windows_amd64.dll
                  cp sharedlib/libprismaid_windows_amd64.dll julia/PrismAId/deps/windows-x86_64/libprismaid_windows_amd64.dll

                  # Check if there are any actual changes
                  if [[ -n "$(git status --porcelain r-package/inst/libs/windows/libprismaid_windows_amd64.dll julia/PrismAId/deps/windows-x86_64/libprismaid_windows_amd64.dll)" ]]; then
                      echo "Changes detected in Windows library files."

                      # Configure git
                      git config --local user.email "action@github.com"
                      git config --local user.name "GitHub Action"

                      # Stage and commit changes
                      git add r-package/inst/libs/windows/libprismaid_windows_amd64.dll julia/PrismAId/deps/windows-x86_64/libprismaid_windows_amd64.dll
                      git commit -m "Update Windows lib."

                      # Check if main branch has changed while we were working
                      git fetch origin main
                      current_main_sha=$(git rev-parse origin/main)

                      if [[ "$original_main_sha" != "$current_main_sha" ]]; then
                          echo "Main branch has been updated. Rebasing changes..."
                          git rebase origin/main

                          # Check if there are still changes after rebasing
                          if [[ -n "$(git diff --name-only HEAD~ HEAD 2>/dev/null)" ]]; then
                              echo "Changes still exist after rebasing. Continuing with PR creation."
                          else
                              echo "No changes remain after rebasing. Skipping PR creation."
                              exit 0
                          fi
                      fi

                      # Push the branch (with force in case we rebased)
                      git push -f origin $branch_name

                      # Create Pull Request
                      gh pr create --title "Update Windows Library" --body "Auto-update by CI/CD." --base main --head $branch_name

                      # Automatically merge the PR
                      gh pr merge --auto --squash --delete-branch
                  else
                      echo "No changes detected in Windows library files. Skipping PR creation."
                  fi

    build-macos-arm64:
        needs: build-windows-amd64
        name: Build macOS Arm64 Shared Library
        runs-on: macos-latest
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.21"

            - name: Build shared library for macOS
              working-directory: sharedlib
              run: |
                  go build -buildmode=c-shared -o libprismaid_darwin_arm64.dylib export.go

            - name: Upload macOS shared library artifact
              uses: actions/upload-artifact@v4
              with:
                  name: macos-arm64-shared-library
                  path: sharedlib/libprismaid_darwin_arm64.dylib

            - name: Install GitHub CLI on macOS
              run: brew install gh

            - name: Commit and push changes for macOS
              shell: bash
              run: |
                  # Get latest main branch
                  git fetch origin main
                  original_main_sha=$(git rev-parse origin/main)

                  # Create a new branch from the latest main
                  branch_name="update-macos-lib-${GITHUB_RUN_ID}"
                  git checkout -b $branch_name origin/main

                  # Copy the macOS libraries to their destinations
                  cp sharedlib/libprismaid_darwin_arm64.dylib r-package/inst/libs/macos/libprismaid_darwin_arm64.dylib
                  cp sharedlib/libprismaid_darwin_arm64.dylib julia/PrismAId/deps/macos-arm64/libprismaid_darwin_arm64.dylib

                  # Check if there are any actual changes
                  if [[ -n "$(git status --porcelain r-package/inst/libs/macos/libprismaid_darwin_arm64.dylib julia/PrismAId/deps/macos-arm64/libprismaid_darwin_arm64.dylib)" ]]; then
                      echo "Changes detected in macOS library files."

                      # Configure git
                      git config --local user.email "action@github.com"
                      git config --local user.name "GitHub Action"

                      # Stage and commit changes
                      git add r-package/inst/libs/macos/libprismaid_darwin_arm64.dylib julia/PrismAId/deps/macos-arm64/libprismaid_darwin_arm64.dylib
                      git commit -m "Update macOS lib."

                      # Check if main branch has changed while we were working
                      git fetch origin main
                      current_main_sha=$(git rev-parse origin/main)

                      if [[ "$original_main_sha" != "$current_main_sha" ]]; then
                          echo "Main branch has been updated. Rebasing changes..."
                          git rebase origin/main

                          # Check if there are still changes after rebasing
                          if [[ -n "$(git diff --name-only HEAD~ HEAD 2>/dev/null)" ]]; then
                              echo "Changes still exist after rebasing. Continuing with PR creation."
                          else
                              echo "No changes remain after rebasing. Skipping PR creation."
                              exit 0
                          fi
                      fi

                      # Push the branch (with force in case we rebased)
                      git push -f origin $branch_name

                      # Create Pull Request
                      gh pr create --title "Update macOS Library" --body "Auto-update by CI/CD." --base main --head $branch_name

                      # Automatically merge the PR
                      gh pr merge --auto --squash --delete-branch
                  else
                      echo "No changes detected in macOS library files. Skipping PR creation."
                  fi

    package-python:
        name: Package Python Project with All Shared Libraries
        runs-on: ubuntu-latest
        needs: [build-linux-amd64, build-windows-amd64, build-macos-arm64]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Copy files for Build
              run: |
                  cp README.md python/README.md
                  cp LICENSE python/LICENSE

            # Download artifacts from build jobs
            - name: Download macOS shared library artifact
              uses: actions/download-artifact@v4
              with:
                  name: macos-arm64-shared-library
                  path: python/prismaid/

            - name: Download Linux shared library artifact
              uses: actions/download-artifact@v4
              with:
                  name: linux-amd64-shared-library
                  path: python/prismaid/

            - name: Download Windows shared library artifact
              uses: actions/download-artifact@v4
              with:
                  name: windows-amd64-shared-library
                  path: python/prismaid/

            - name: Install build tools
              working-directory: ./python
              run: |
                  python -m pip install --upgrade pip hatch wheel build

            - name: Set Hatch Version
              run: echo "HATCH_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

            - name: Build Python package
              working-directory: ./python
              run: |
                  python -m build

            - name: Upload Python Package Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: prismaid-python-package
                  path: python/dist/*.whl

    publish-to-pypi:
        name: Publish Python distribution to PyPI
        needs: package-python # Ensure it waits for the packaging job
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download Python Package Artifact
              uses: actions/download-artifact@v4
              with:
                  name: prismaid-python-package
                  path: dist/

            - name: Install Twine
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install --upgrade twine pkginfo packaging

            - name: Publish distribution to PyPI
              env:
                  TWINE_USERNAME: "__token__"
                  TWINE_PASSWORD: "${{ secrets.PYPY_API_TOKEN }}"
              run: |
                  twine upload --verbose --repository-url https://upload.pypi.org/legacy/ dist/*

    update-version-for-julia:
        runs-on: ubuntu-latest
        needs:
            [
                update-version-for-r,
                build-linux-amd64,
                build-windows-amd64,
                build-macos-arm64,
            ]
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Git
              run: sudo apt-get install git

            - name: Determine Version
              id: versioning
              run: |
                  if [[ $GITHUB_REF =~ refs/tags/v* ]]; then
                    # If build is triggered by a tag
                    VERSION=${GITHUB_REF#refs/tags/v}
                  else
                    # If build is triggered by a branch push without a tag, use the latest tag from main
                    VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
                    VERSION=${VERSION#v}  # Strip 'v' prefix if present in tags
                  fi
                  echo "VERSION=${VERSION}" >> $GITHUB_ENV
                  echo "Version determined: ${VERSION}"

            - name: Update Project.toml File
              run: |
                  sed -i "s/^version = .*/version = \"${{ env.VERSION }}\"/" julia/PrismAId/Project.toml

            - name: Install GitHub CLI
              run: sudo apt-get install gh -y

            - name: Commit and push changes
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git fetch origin main
                  # Check for changes in the Project.toml file
                  git add julia/PrismAId/Project.toml
                  if git diff --staged --quiet; then
                    echo "No changes detected. Skipping branch creation and pull request."
                    exit 0
                  fi
                  # Create a new branch only if there are changes
                  git checkout -b update-julia-version-${GITHUB_RUN_ID}
                  git commit -m "Update Julia package version to ${{ env.VERSION }}"
                  git push -u origin update-julia-version-${GITHUB_RUN_ID}
                  # Create Pull Request
                  gh pr create --title "Update Julia Package Version" --body "Auto-update version to ${{ env.VERSION }} by CI/CD." --base main --head update-julia-version-${GITHUB_RUN_ID}
                  # Automatically merge the PR
                  gh pr merge --auto --squash --delete-branch

    register-julia-package:
        runs-on: ubuntu-latest
        needs: [update-version-for-julia]

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Install GitHub CLI
              run: sudo apt-get install gh

            # Post Registrator Comment on Issue #85
            - name: Trigger Registrator
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh issue comment --repo open-and-sustainable/prismaid \
                    --body "@JuliaRegistrator register subdir=julia/PrismAId" \
                    85
