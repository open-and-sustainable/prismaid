# Compiler Flags
PKG_CFLAGS = -I$(R_HOME)/include

# Platform Identification
UNAME := $(shell uname)

# Platform-Specific Configuration for Library Linking
ifeq ($(UNAME), Linux)
	PKG_LIBS = -L$(R_HOME)/lib -lR -L../inst/libs/linux -lprismaid_linux_amd64 -Wl,-rpath,'$$ORIGIN/../libs/linux'
endif

# Windows configuration moved to Makevars.win file
# ifeq ($(UNAME), Windows_NT)
#     # Ensure the R base library and your library are both linked.
# 	PKG_LIBS = -L$(R_HOME)/bin$(R_ARCH) -lR -L../inst/libs/windows -lprismaid_windows_amd64
#     # If using a .def file to control exports, ensure it's being used correctly:
#     # PKG_LIBS += -Wl,--input-def=../inst/libs/windows/libprismaid_windows_amd64.def
#     # Optionally add flags to ensure all symbols are exported:
#     PKG_LIBS += -Wl,--verbose
# endif


ifeq ($(UNAME), Darwin)
	PKG_LIBS = -L../inst/libs/macos -lprismaid_darwin_arm64 -Wl,-rpath,@loader_path/../libs/macos -Wl,-install_name,@loader_path/../libs/macos/libprismaid_darwin_arm64.dylib
    # Additional command to adjust library path in prismaid.so after building
    all: prismaid.so
		install_name_tool -change libprismaid_darwin_arm64.dylib @loader_path/../libs/macos/libprismaid_darwin_arm64.dylib prismaid.so
endif

# Default target
all: R_wrapper.o

# Compile R_wrapper.c to R_wrapper.o
R_wrapper.o: R_wrapper.c
	$(CC) $(PKG_CFLAGS) -c R_wrapper.c -o R_wrapper.o
